// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: data.proto

package com.github.xy02.raas;

public final class DataOuterClass {
  private DataOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  public interface DataOrBuilder extends
      // @@protoc_insertion_point(interface_extends:raas.Data)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     *raw binary data
     * </pre>
     *
     * <code>optional bytes raw = 1;</code>
     */
    com.google.protobuf.ByteString getRaw();

    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    String getFinal();
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    com.google.protobuf.ByteString
        getFinalBytes();

    /**
     * <pre>
     *true means ping, false means pong
     * </pre>
     *
     * <code>optional bool ping_pong = 3;</code>
     */
    boolean getPingPong();

    /**
     * <pre>
     *request id
     * </pre>
     *
     * <code>optional int64 request_id = 5;</code>
     */
    long getRequestId();

    public Data.TypeCase getTypeCase();
  }
  /**
   * Protobuf type {@code raas.Data}
   */
  public  static final class Data extends
      com.google.protobuf.GeneratedMessageLite<
          Data, Data.Builder> implements
      // @@protoc_insertion_point(message_implements:raas.Data)
      DataOrBuilder {
    private Data() {
    }
    private int typeCase_ = 0;
    private Object type_;
    public enum TypeCase
        implements com.google.protobuf.Internal.EnumLite {
      RAW(1),
      FINAL(2),
      PING_PONG(3),
      TYPE_NOT_SET(0);
      private final int value;
      private TypeCase(int value) {
        this.value = value;
      }
      /**
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @Deprecated
      public static TypeCase valueOf(int value) {
        return forNumber(value);
      }

      public static TypeCase forNumber(int value) {
        switch (value) {
          case 1: return RAW;
          case 2: return FINAL;
          case 3: return PING_PONG;
          case 0: return TYPE_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public TypeCase
    getTypeCase() {
      return TypeCase.forNumber(
          typeCase_);
    }

    private void clearType() {
      typeCase_ = 0;
      type_ = null;
    }

    public static final int RAW_FIELD_NUMBER = 1;
    /**
     * <pre>
     *raw binary data
     * </pre>
     *
     * <code>optional bytes raw = 1;</code>
     */
    public com.google.protobuf.ByteString getRaw() {
      if (typeCase_ == 1) {
        return (com.google.protobuf.ByteString) type_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }
    /**
     * <pre>
     *raw binary data
     * </pre>
     *
     * <code>optional bytes raw = 1;</code>
     */
    private void setRaw(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  typeCase_ = 1;
      type_ = value;
    }
    /**
     * <pre>
     *raw binary data
     * </pre>
     *
     * <code>optional bytes raw = 1;</code>
     */
    private void clearRaw() {
      if (typeCase_ == 1) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int FINAL_FIELD_NUMBER = 2;
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    public String getFinal() {
      String ref = "";
      if (typeCase_ == 2) {
        ref = (String) type_;
      }
      return ref;
    }
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    public com.google.protobuf.ByteString
        getFinalBytes() {
      String ref = "";
      if (typeCase_ == 2) {
        ref = (String) type_;
      }
      return com.google.protobuf.ByteString.copyFromUtf8(ref);
    }
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    private void setFinal(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  typeCase_ = 2;
      type_ = value;
    }
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    private void clearFinal() {
      if (typeCase_ == 2) {
        typeCase_ = 0;
        type_ = null;
      }
    }
    /**
     * <pre>
     *""(empty string) means complete, "err message"(not empty) means error
     * </pre>
     *
     * <code>optional string final = 2;</code>
     */
    private void setFinalBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      typeCase_ = 2;
      type_ = value.toStringUtf8();
    }

    public static final int PING_PONG_FIELD_NUMBER = 3;
    /**
     * <pre>
     *true means ping, false means pong
     * </pre>
     *
     * <code>optional bool ping_pong = 3;</code>
     */
    public boolean getPingPong() {
      if (typeCase_ == 3) {
        return (Boolean) type_;
      }
      return false;
    }
    /**
     * <pre>
     *true means ping, false means pong
     * </pre>
     *
     * <code>optional bool ping_pong = 3;</code>
     */
    private void setPingPong(boolean value) {
      typeCase_ = 3;
      type_ = value;
    }
    /**
     * <pre>
     *true means ping, false means pong
     * </pre>
     *
     * <code>optional bool ping_pong = 3;</code>
     */
    private void clearPingPong() {
      if (typeCase_ == 3) {
        typeCase_ = 0;
        type_ = null;
      }
    }

    public static final int REQUEST_ID_FIELD_NUMBER = 5;
    private long requestId_;
    /**
     * <pre>
     *request id
     * </pre>
     *
     * <code>optional int64 request_id = 5;</code>
     */
    public long getRequestId() {
      return requestId_;
    }
    /**
     * <pre>
     *request id
     * </pre>
     *
     * <code>optional int64 request_id = 5;</code>
     */
    private void setRequestId(long value) {
      
      requestId_ = value;
    }
    /**
     * <pre>
     *request id
     * </pre>
     *
     * <code>optional int64 request_id = 5;</code>
     */
    private void clearRequestId() {
      
      requestId_ = 0L;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (typeCase_ == 1) {
        output.writeBytes(
            1, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) type_));
      }
      if (typeCase_ == 2) {
        output.writeString(2, getFinal());
      }
      if (typeCase_ == 3) {
        output.writeBool(
            3, (boolean)((Boolean) type_));
      }
      if (requestId_ != 0L) {
        output.writeInt64(5, requestId_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (typeCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              1, (com.google.protobuf.ByteString)((com.google.protobuf.ByteString) type_));
      }
      if (typeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getFinal());
      }
      if (typeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              3, (boolean)((Boolean) type_));
      }
      if (requestId_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, requestId_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static Data parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Data parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Data parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static Data parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static Data parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Data parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Data parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static Data parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static Data parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static Data parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(Data prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * Protobuf type {@code raas.Data}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          Data, Builder> implements
        // @@protoc_insertion_point(builder_implements:raas.Data)
        DataOrBuilder {
      // Construct using com.github.xy02.raas.DataOuterClass.Data.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }

      public TypeCase
          getTypeCase() {
        return instance.getTypeCase();
      }

      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }


      /**
       * <pre>
       *raw binary data
       * </pre>
       *
       * <code>optional bytes raw = 1;</code>
       */
      public com.google.protobuf.ByteString getRaw() {
        return instance.getRaw();
      }
      /**
       * <pre>
       *raw binary data
       * </pre>
       *
       * <code>optional bytes raw = 1;</code>
       */
      public Builder setRaw(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setRaw(value);
        return this;
      }
      /**
       * <pre>
       *raw binary data
       * </pre>
       *
       * <code>optional bytes raw = 1;</code>
       */
      public Builder clearRaw() {
        copyOnWrite();
        instance.clearRaw();
        return this;
      }

      /**
       * <pre>
       *""(empty string) means complete, "err message"(not empty) means error
       * </pre>
       *
       * <code>optional string final = 2;</code>
       */
      public String getFinal() {
        return instance.getFinal();
      }
      /**
       * <pre>
       *""(empty string) means complete, "err message"(not empty) means error
       * </pre>
       *
       * <code>optional string final = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFinalBytes() {
        return instance.getFinalBytes();
      }
      /**
       * <pre>
       *""(empty string) means complete, "err message"(not empty) means error
       * </pre>
       *
       * <code>optional string final = 2;</code>
       */
      public Builder setFinal(
          String value) {
        copyOnWrite();
        instance.setFinal(value);
        return this;
      }
      /**
       * <pre>
       *""(empty string) means complete, "err message"(not empty) means error
       * </pre>
       *
       * <code>optional string final = 2;</code>
       */
      public Builder clearFinal() {
        copyOnWrite();
        instance.clearFinal();
        return this;
      }
      /**
       * <pre>
       *""(empty string) means complete, "err message"(not empty) means error
       * </pre>
       *
       * <code>optional string final = 2;</code>
       */
      public Builder setFinalBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setFinalBytes(value);
        return this;
      }

      /**
       * <pre>
       *true means ping, false means pong
       * </pre>
       *
       * <code>optional bool ping_pong = 3;</code>
       */
      public boolean getPingPong() {
        return instance.getPingPong();
      }
      /**
       * <pre>
       *true means ping, false means pong
       * </pre>
       *
       * <code>optional bool ping_pong = 3;</code>
       */
      public Builder setPingPong(boolean value) {
        copyOnWrite();
        instance.setPingPong(value);
        return this;
      }
      /**
       * <pre>
       *true means ping, false means pong
       * </pre>
       *
       * <code>optional bool ping_pong = 3;</code>
       */
      public Builder clearPingPong() {
        copyOnWrite();
        instance.clearPingPong();
        return this;
      }

      /**
       * <pre>
       *request id
       * </pre>
       *
       * <code>optional int64 request_id = 5;</code>
       */
      public long getRequestId() {
        return instance.getRequestId();
      }
      /**
       * <pre>
       *request id
       * </pre>
       *
       * <code>optional int64 request_id = 5;</code>
       */
      public Builder setRequestId(long value) {
        copyOnWrite();
        instance.setRequestId(value);
        return this;
      }
      /**
       * <pre>
       *request id
       * </pre>
       *
       * <code>optional int64 request_id = 5;</code>
       */
      public Builder clearRequestId() {
        copyOnWrite();
        instance.clearRequestId();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:raas.Data)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new Data();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          Data other = (Data) arg1;
          requestId_ = visitor.visitLong(requestId_ != 0L, requestId_,
              other.requestId_ != 0L, other.requestId_);
          switch (other.getTypeCase()) {
            case RAW: {
              type_ = visitor.visitOneofByteString(
                  typeCase_ == 1, type_, other.type_);
              break;
            }
            case FINAL: {
              type_ = visitor.visitOneofString(
                 typeCase_ == 2, type_, other.type_);
              break;
            }
            case PING_PONG: {
              type_ = visitor.visitOneofBoolean(
                  typeCase_ == 3, type_, other.type_);
              break;
            }
            case TYPE_NOT_SET: {
              visitor.visitOneofNotSet(typeCase_ != 0);
              break;
            }
          }
          if (visitor == MergeFromVisitor
              .INSTANCE) {
            if (other.typeCase_ != 0) {
              typeCase_ = other.typeCase_;
            }
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  typeCase_ = 1;
                  type_ = input.readBytes();
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();
                  typeCase_ = 2;
                  type_ = s;
                  break;
                }
                case 24: {
                  typeCase_ = 3;
                  type_ = input.readBool();
                  break;
                }
                case 40: {

                  requestId_ = input.readInt64();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (Data.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:raas.Data)
    private static final Data DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new Data();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static Data getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<Data> PARSER;

    public static com.google.protobuf.Parser<Data> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
